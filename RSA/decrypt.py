from Crypto.PublicKey import RSA
import base64

# Assuming e, d, n, and ciphertext are given
e = 0x10001
d = 0x49aa5a617781bc4cd8374d02f7588b0166cb54b2a0128825164e510083b825edc1ad57efedf6464581e5abd66d84dc38c88e6cd960d5c78a758513d17928e6ba7195bc91c5e183847453dffff6058a84940425d0ce95c6b56c6ad05d5ea9316b4602bea1aa3855475faef2ec16149fba40f9a840658d54cd9a1b5340bf784b22cc047db6b522a60893a21ddba7169484b9ef76828ab056001268bfd635b8f1d71c24c243b445584b9ac8d38ae99550d0dd9ac02603f74ed3e0e1514f0595bf946223bd3080d2f9a0086f52eac27e7f849d97c08a36807186f4c0323775829cb86b9f38d56c5511da57df345a1cace37f29664d0e875a25e3702c19e9dd03aca9
n = 0xc0cbda0cacf80df88ad53faee9b7f342e37975012484dd05bd665674c6f36e9aac6a75f7fbe470c7cdfac3537c9015676004cc80e96884162cc0a9095d3ffc6f84ab33298aa68287a92592e02268044647ac1b3e949c6347a54d49113c9412faa5bd3fb485356e8537f47ead2be00a4b25e04cd163e8ac992205ad7556e5dd8b957cb8cac78191ac4068cf3a6f3bfd32d74a9a5595b338e4d5c7aa55bc6a0d61b768ba591546955c9d1c6857d297263782a705837235ff31e5609b34c0049cd8fa420630ee1b9a47b9358683cfc7caf9ba5a1322fcad2f6a12055ba22fff5feb74295f4f8c1cd43561c44f0315f1b1a39cc02020a67ec02a1b5301949830e703
ciphertext_bytes = base64.b64decode("fY/OuAx9jkqFbYybosKuRQ8gEI1jqrpkEaIXQLYEVp7rdrQuTtACfFlnWYG9jbD3eb1UNUidYvMF49DfUp/1KMhghi4xQpWHhiBjX9bsqxLypysPzF1ySbSlqk2uCQs4AmQDwjkx4QIGyv2ZyPw5myfK3QyfOuC4MWjmcaU6PC5Kill76fnxylA8iIObZj9f1egtvcno6Qhy0nVkLyTH/PHZQpODp6xgNV54RnJcmL+OLTQJbB0GTj3LLAtf4ct+cKBeDqsg11fNRRYmO57xZofhBfAI9+OTZSwwu23TlbGucBog65KeDauQbGkOIWRn5Sa6I73sat+LXGPPkcFLNA==")

# Decrypt the ciphertext using RSA formula
plaintext_number = pow(int.from_bytes(ciphertext_bytes, "little"), d, n)
plaintext = plaintext_number.to_bytes(256, "little").rstrip(b'\x00')  # Remove potential trailing zero bytes

print(plaintext.decode())
